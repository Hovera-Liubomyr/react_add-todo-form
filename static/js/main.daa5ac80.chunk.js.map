{"version":3,"sources":["api/users.ts","services/user.ts","components/PostForm/PostForm.tsx","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","services/todo.ts","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","getUserById","userId","usersFromServer","find","user","PostForm","onSubmit","useState","title","setTitle","hasTitleError","setHasTitleError","setUserId","hasUserIdError","setHasUserIdError","className","action","method","event","preventDefault","trimmedTitle","trim","completed","htmlFor","type","placeholder","value","onChange","target","map","UserInfo","href","TodoInfo","todo","classNames","TodoList","todos","getNewTodoId","Math","max","initialTodo","App","setTodos","data","newTodo","currentTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.daa5ac80.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { User } from '../types/user';\nimport usersFromServer from '../api/users';\n\nexport function getUserById(userId: number): User | null {\n  return usersFromServer.find(user => user.id === userId) || null;\n}\n","import React, { useState } from 'react';\nimport { Todo } from '../../types/todo';\nimport usersFromServer from '../../api/users';\nimport { getUserById } from '../../services/user';\n\ntype Props = {\n  onSubmit: (todo: Todo) => void,\n};\n\nexport const PostForm: React.FC<Props> = ({ onSubmit }) => {\n  const [title, setTitle] = useState('');\n  const [hasTitleError, setHasTitleError] = useState(false);\n\n  const [userId, setUserId] = useState(0);\n  const [hasUserIdError, setHasUserIdError] = useState(false);\n\n  const handleTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    setHasTitleError(false);\n  };\n\n  const handleUser = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+event.target.value);\n    setHasUserIdError(false);\n  };\n\n  const reset = () => {\n    setTitle('');\n    setUserId(0);\n\n    setHasTitleError(false);\n    setHasUserIdError(false);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const trimmedTitle = title.trim();\n\n    if (!trimmedTitle && userId) {\n      setTitle('');\n      setHasTitleError(true);\n\n      return;\n    }\n\n    if (!trimmedTitle && !userId) {\n      setTitle('');\n      setHasTitleError(true);\n      setHasUserIdError(true);\n\n      return;\n    }\n\n    if (!title) {\n      setHasTitleError(true);\n    }\n\n    if (!userId) {\n      setHasUserIdError(true);\n    }\n\n    if (!title || !userId) {\n      return;\n    }\n\n    onSubmit({\n      id: 0,\n      title,\n      completed: false,\n      userId,\n      user: getUserById(userId),\n    });\n\n    reset();\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"title\">\n            Title:\n          </label>\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            id=\"title\"\n            placeholder=\"Enter a title\"\n            value={title}\n            onChange={handleTitle}\n          />\n\n          {hasTitleError && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"user\">\n            User:\n          </label>\n          <select\n            data-cy=\"userSelect\"\n            id=\"user\"\n            value={userId}\n            onChange={handleUser}\n          >\n\n            <option value=\"0\">Choose a user</option>\n\n            {usersFromServer.map(user => (\n              <option\n                value={user.id}\n                key={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n\n          </select>\n\n          {hasUserIdError && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n    </div>\n  );\n};\n","import { User } from '../../types/user';\n\ntype Props = {\n  user: User\n};\n\nexport const UserInfo: React.FC<Props> = ({\n  user: {\n    name,\n    email,\n  },\n}) => {\n  return (\n    <a\n      className=\"UserInfo\"\n      href={`mailto:${email}`}\n    >\n      {name}\n    </a>\n\n  );\n};\n","import classNames from 'classnames';\nimport { UserInfo } from '../UserInfo/UserInfo';\nimport { Todo } from '../../types/todo';\nimport { getUserById } from '../../services/user';\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoInfo: React.FC<Props> = ({\n  todo: {\n    title,\n    completed = false,\n    id,\n    userId,\n\n  },\n}) => {\n  const user = getUserById(userId);\n\n  return (\n    <article\n      data-id={id}\n      className={classNames(\n        'TodoInfo',\n        { 'TodoInfo--completed': completed === true },\n      )}\n      key={id}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && (\n        <UserInfo user={user} />\n      )}\n    </article>\n  );\n};\n","import { TodoInfo } from '../TodoInfo/TodoInfo';\nimport { Todo } from '../../types/todo';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo\n          todo={todo}\n          key={todo.id}\n        />\n      ))}\n    </section>\n  );\n};\n","import { Todo } from '../types/todo';\n\nexport function getNewTodoId(todos: Todo[]) {\n  const maxId = Math.max(\n    ...todos.map(todo => todo.id),\n  );\n\n  return maxId + 1;\n}\n","import './App.scss';\nimport { useState } from 'react';\nimport { PostForm } from './components/PostForm/PostForm';\nimport { TodoList } from './components/TodoList/TodoList';\nimport todosFromServer from './api/todos';\nimport { Todo } from './types/todo';\nimport { getUserById } from './services/user';\nimport { getNewTodoId } from './services/todo';\n\nconst initialTodo: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>(initialTodo);\n\n  const addTodo = ({ id, ...data }: Todo) => {\n    const newTodo = {\n      id: getNewTodoId(todos),\n      ...data,\n    };\n\n    setTodos(currentTodos => [...currentTodos, newTodo]);\n  };\n\n  return (\n    <div>\n      <PostForm onSubmit={addTodo} />\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}